{{- if and .Values.existingSecrets.enabled  .Values.registrationAuthority }}
apiVersion: v1
kind: Secret
type: smallstep.com/private-keys
metadata:
  name: {{ include "step-certificates.fullname" . }}-secrets
  namespace: {{ .Release.Namespace }}
{{- end }}
---
{{- if and .Values.existingSecrets.configAsSecret .Values.existingSecrets.generate.configAsSecret.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "step-certificates.fullname" . }}-config
stringData:
  ca.json: |
    {
      "root": "/home/step/certs/root_ca.crt",
      "federatedRoots": null,
      "crt": "/home/step/certs/intermediate_ca.crt",
      "key": "/home/step/secrets/intermediate_ca_key",
      "address": ":{{ .Values.service.targetPort }}",
      "insecureAddress": "",
      "dnsNames": [
        "{{- index .Values "ingress" "hosts" 0 "host" }}",
        "{{ .Release.Name }}-step-certificates.{{ .Release.Namespace }}.svc.cluster.local",
        "localhost"
      ],
      "logger": {
        "format": "text"
      },
      "db": {
        "type": "badgerv2",
        "dataSource": "/home/step/db",
        "badgerFileLoadingMode": ""
      },
      "authority": {
        "provisioners": [
{{ .Values.existingSecrets.generate.configAsSecret.provisioners | nindent 10 }}
        ],
        "type": "vaultcas",
        "certificateAuthority": "{{ .Values.existingSecrets.generate.configAsSecret.vault.certificateAuthority }}",
        "certificateAuthorityFingerprint": "{{ .Values.existingSecrets.generate.configAsSecret.vault.certificateAuthorityFingerprint }}",
        "config": {
          "pkiMountPath": "{{ .Values.existingSecrets.generate.configAsSecret.vault.pkiMountPath }}",
          "pkiRoleRSA": "{{ .Values.existingSecrets.generate.configAsSecret.vault.pkiRoleRSA }}",
          "pkiRoleEC": "{{ .Values.existingSecrets.generate.configAsSecret.vault.pkiRoleEC }}",
          "pkiRoleEd25519": "{{ .Values.existingSecrets.generate.configAsSecret.vault.pkiRoleEd25519 }}",
          "authType": "{{ .Values.existingSecrets.generate.configAsSecret.vault.authType }}",
          "authOptions": {
            "role": "{{ .Values.existingSecrets.generate.configAsSecret.vault.role }}"
          }
        }
      },
      "tls": {
        "cipherSuites": [
          "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
          "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
        ],
        "minVersion": 1.2,
        "maxVersion": 1.3,
        "renegotiation": false
      }
    }
  defaults.json: |
    {
      "ca-url": "{{ .Values.existingSecrets.generate.configAsSecret.vault.certificateAuthority }}",
      "fingerprint": "{{ .Values.existingSecrets.generate.configAsSecret.vault.certificateAuthorityFingerprint }}",
      "redirect-url": ""
    }
type: Opaque
{{- end }}